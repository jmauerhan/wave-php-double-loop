<?php declare(strict_types=1);

namespace Test\Unit\Chirp;

use Chirper\Chirp\Chirp;
use Chirper\Chirp\JsonApiChirpTransformer;
use Chirper\Http\Validation\Validator;
use Chirper\Json\InvalidJsonApiException;
use Chirper\Json\InvalidJsonException;
use PHPUnit\Framework\MockObject\MockObject;
use Test\TestCase;

class JsonApiChirpTransformerTest extends TestCase
{
    /** @var MockObject|Validator */
    private $validator;

    public function setUp()
    {
        $this->validator = $this->createMock(Validator::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testToChirpSendsJsonToValidator()
    {
        $this->expectException(InvalidJsonException::class);
        $json  = "{}";
        $rules = [
            'data'                   => ['required'],
            'data.id'                => ['required', 'uuid'],
            'data.type'              => ['required', ['in', ['chirp']]],
            'data.attributes'        => ['required'],
            'data.attributes.text'   => ['required', ['lengthMax', 100]],
            'data.attributes.author' => ['required', ['lengthMax', 200]]
        ];
        $this->validator->expects($this->once())
                        ->method('setRules')
                        ->with($rules);

        $this->validator->expects($this->once())
                        ->method('isValid')
                        ->with($json);

        $transformer = new JsonApiChirpTransformer($this->validator);
        $transformer->toChirp($json);
    }

    public function testToChirpThrowsInvalidJsonExceptionWhenJsonInvalid()
    {
        $this->expectException(InvalidJsonException::class);
        $json = '{"data":"}';
        $this->validator->method('isValid')
                        ->willReturn(false);
        $transformer = new JsonApiChirpTransformer($this->validator);
        $transformer->toChirp($json);
    }

    public function testToChirpReturnsChirpWithPropertiesFromJson()
    {
        $uuid      = $this->faker->uuid;
        $chirpText = $this->faker->realText(50);
        $author    = $this->faker->userName;

        $attributes = (object)[
            "text"   => $chirpText,
            "author" => $author
        ];
        $data       = (object)[
            "type"       => "chirp",
            "id"         => $uuid,
            "attributes" => $attributes
        ];

        $json = json_encode((object)['data' => $data]);

        $now           = (new \DateTime())->format('Y-m-d H:i:s');
        $expectedChirp = new Chirp($uuid, $chirpText, $author, $now);

        $this->validator->method('isValid')
                        ->willReturn(true);

        $transformer = new JsonApiChirpTransformer($this->validator);
        $chirp       = $transformer->toChirp($json);

        $this->assertEquals($expectedChirp, $chirp);
    }

    public function testToJsonReturnsJsonString()
    {
        $uuid   = $this->faker->uuid;
        $text   = $this->faker->realText(50);
        $author = $this->faker->userName;
        $date   = $this->faker->date('Y-m-d H:i:s');
        $chirp  = new Chirp($uuid, $text, $author, $date);

        $expectedJson =
            <<<JSON
            {
                "data":{
                    "id":"{$uuid}",
                    "type":"chirp",
                    "attributes":{
                        "text":"{$text}",
                        "author":"{$author}",
                        "created_at":"{$date}"
                    }
                }
            }
JSON;

        $transformer = new JsonApiChirpTransformer($this->validator);
        $json        = $transformer->toJson($chirp);

        $this->assertJsonStringEqualsJsonString($expectedJson, $json);
    }
}
